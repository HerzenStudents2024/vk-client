{"ast":null,"code":"import { _ as _object_spread } from \"@swc/helpers/_/_object_spread\";\nimport { _ as _object_spread_props } from \"@swc/helpers/_/_object_spread_props\";\nimport { _ as _object_without_properties } from \"@swc/helpers/_/_object_without_properties\";\nimport { _ as _sliced_to_array } from \"@swc/helpers/_/_sliced_to_array\";\nimport { _ as _type_of } from \"@swc/helpers/_/_type_of\";\nimport * as React from \"react\";\nimport { classNames, noop } from \"@vkontakte/vkjs\";\nimport { useAdaptivity } from \"../../hooks/useAdaptivity\";\nimport { useChipsInput } from \"../../hooks/useChipsInput\";\nimport { useExternRef } from \"../../hooks/useExternRef\";\nimport { SizeType } from \"../../lib/adaptivity\";\nimport { Chip } from \"../Chip/Chip\";\nexport var chipsInputDefaultProps = {\n  onChange: noop,\n  onInputChange: noop,\n  onKeyDown: noop,\n  onBlur: noop,\n  onFocus: noop,\n  value: [],\n  inputValue: \"\",\n  inputAriaLabel: \"Введите ваше значение...\",\n  getOptionValue: function (option) {\n    return option.value;\n  },\n  getOptionLabel: function (option) {\n    return option.label;\n  },\n  getNewOptionData: function (_, label) {\n    return {\n      value: label,\n      label: label\n    };\n  },\n  renderChip: function renderChip(props) {\n    if (!props) {\n      return null;\n    }\n    var disabled = props.disabled,\n      value = props.value,\n      label = props.label,\n      rest = _object_without_properties(props, [\"disabled\", \"value\", \"label\"]);\n    return /*#__PURE__*/React.createElement(Chip, _object_spread({\n      value: value,\n      removable: !disabled\n    }, rest), label);\n  },\n  addOnBlur: false\n};\nexport var ChipsInputBase = function (props) {\n  var propsWithDefault = _object_spread({}, chipsInputDefaultProps, props);\n  var style = propsWithDefault.style,\n    className = propsWithDefault.className,\n    getRootRef = propsWithDefault.getRootRef,\n    value = propsWithDefault.value,\n    onChange = propsWithDefault.onChange,\n    onInputChange = propsWithDefault.onInputChange,\n    onKeyDown = propsWithDefault.onKeyDown,\n    onBlur = propsWithDefault.onBlur,\n    onFocus = propsWithDefault.onFocus,\n    children = propsWithDefault.children,\n    inputValue = propsWithDefault.inputValue,\n    getRef = propsWithDefault.getRef,\n    placeholder = propsWithDefault.placeholder,\n    getOptionValue = propsWithDefault.getOptionValue,\n    getOptionLabel = propsWithDefault.getOptionLabel,\n    getNewOptionData = propsWithDefault.getNewOptionData,\n    renderChip = propsWithDefault.renderChip,\n    inputAriaLabel = propsWithDefault.inputAriaLabel,\n    addOnBlur = propsWithDefault.addOnBlur,\n    restProps = _object_without_properties(propsWithDefault, [\"style\", \"className\", \"getRootRef\", \"value\", \"onChange\", \"onInputChange\", \"onKeyDown\", \"onBlur\", \"onFocus\", \"children\", \"inputValue\", \"getRef\", \"placeholder\", \"getOptionValue\", \"getOptionLabel\", \"getNewOptionData\", \"renderChip\", \"inputAriaLabel\", \"addOnBlur\"]);\n  var sizeY = useAdaptivity().sizeY;\n  var _React_useState = _sliced_to_array(React.useState(false), 2),\n    focused = _React_useState[0],\n    setFocused = _React_useState[1];\n  var _useChipsInput = useChipsInput(propsWithDefault),\n    fieldValue = _useChipsInput.fieldValue,\n    addOptionFromInput = _useChipsInput.addOptionFromInput,\n    removeOption = _useChipsInput.removeOption,\n    selectedOptions = _useChipsInput.selectedOptions,\n    handleInputChange = _useChipsInput.handleInputChange;\n  var inputRef = useExternRef(getRef);\n  var isDisabled = restProps.disabled || restProps.readOnly;\n  var handleKeyDown = function (e) {\n    if (isDisabled) {\n      e.preventDefault();\n      return;\n    }\n    onKeyDown(e);\n    if (e.key === \"Backspace\" && !e.defaultPrevented && !fieldValue && selectedOptions.length) {\n      removeOption(getOptionValue(selectedOptions[selectedOptions.length - 1]));\n      e.preventDefault();\n    }\n    if (e.key === \"Enter\" && !e.defaultPrevented && fieldValue) {\n      addOptionFromInput();\n      e.preventDefault();\n    }\n  };\n  var handleBlur = function (e) {\n    if (focused) {\n      setFocused(false);\n    }\n    onBlur(e);\n    if (addOnBlur && !e.defaultPrevented) {\n      addOptionFromInput();\n    }\n  };\n  var handleFocus = function (e) {\n    if (!focused) {\n      setFocused(true);\n    }\n    onFocus(e);\n  };\n  var handleChipRemove = function (_, value) {\n    if (value !== undefined) {\n      removeOption(value);\n    }\n  };\n  var handleClick = function (e) {\n    var _inputRef;\n    if (isDisabled) {\n      e.preventDefault();\n      return;\n    }\n    if (((_inputRef = inputRef) === null || _inputRef === void 0 ? void 0 : _inputRef.current) !== null && !focused) {\n      inputRef.current.focus();\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    onClick: handleClick,\n    role: \"presentation\",\n    style: style,\n    className: classNames(\"vkuiChipsInputBase\", sizeY === SizeType.COMPACT && \"vkuiChipsInputBase--sizeY-compact\", !selectedOptions.length && \"vkuiChipsInputBase--hasPlaceholder\", className),\n    ref: getRootRef\n  }, selectedOptions.map(function (option) {\n    var value = getOptionValue(option);\n    var label = getOptionLabel(option);\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      key: \"\".concat(typeof value === \"undefined\" ? \"undefined\" : _type_of(value), \"-\").concat(value)\n    }, renderChip({\n      option: option,\n      value: value,\n      label: label,\n      onRemove: handleChipRemove,\n      disabled: Boolean(restProps.disabled),\n      className: \"vkuiChipsInputBase__chip\"\n    }));\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    className: \"vkuiChipsInputBase__label\",\n    \"aria-label\": inputAriaLabel\n  }, /*#__PURE__*/React.createElement(\"input\", _object_spread_props(_object_spread({\n    type: \"text\",\n    autoCapitalize: \"none\",\n    autoComplete: \"off\",\n    autoCorrect: \"off\",\n    spellCheck: false,\n    \"aria-autocomplete\": \"list\",\n    className: \"vkuiChipsInputBase__el\"\n  }, restProps), {\n    ref: inputRef,\n    value: fieldValue,\n    onChange: handleInputChange,\n    onKeyDown: handleKeyDown,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    placeholder: selectedOptions.length ? undefined : placeholder\n  }))));\n};","map":{"version":3,"names":["React","classNames","noop","useAdaptivity","useChipsInput","useExternRef","SizeType","Chip","chipsInputDefaultProps","onChange","onInputChange","onKeyDown","onBlur","onFocus","value","inputValue","inputAriaLabel","getOptionValue","option","getOptionLabel","label","getNewOptionData","_","renderChip","props","disabled","rest","_object_without_properties","createElement","_object_spread","removable","addOnBlur","ChipsInputBase","propsWithDefault","style","className","getRootRef","children","getRef","placeholder","restProps","sizeY","_React_useState","_sliced_to_array","useState","focused","setFocused","_useChipsInput","fieldValue","addOptionFromInput","removeOption","selectedOptions","handleInputChange","inputRef","isDisabled","readOnly","handleKeyDown","e","preventDefault","key","defaultPrevented","length","handleBlur","handleFocus","handleChipRemove","undefined","handleClick","_inputRef","current","focus","onClick","role","COMPACT","ref","map","Fragment","concat","_type_of","onRemove","Boolean","_object_spread_props","type","autoCapitalize","autoComplete","autoCorrect","spellCheck"],"sources":["/Users/evgeny/Desktop/VsCodeProjects/vk-client/vk-client/node_modules/@vkontakte/vkui/src/components/ChipsInputBase/ChipsInputBase.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNames, noop } from '@vkontakte/vkjs';\nimport { useAdaptivity } from '../../hooks/useAdaptivity';\nimport { useChipsInput } from '../../hooks/useChipsInput';\nimport { useExternRef } from '../../hooks/useExternRef';\nimport { SizeType } from '../../lib/adaptivity';\nimport { HasAlign, HasRef, HasRootRef } from '../../types';\nimport { Chip, ChipOption, ChipValue, RenderChip } from '../Chip/Chip';\nimport styles from './ChipsInputBase.module.css';\n\nexport interface ChipsInputBaseProps<Option extends ChipOption>\n  extends Omit<React.InputHTMLAttributes<HTMLInputElement>, 'value' | 'onChange'>,\n    HasRef<HTMLInputElement>,\n    HasRootRef<HTMLDivElement>,\n    HasAlign {\n  value: Option[];\n  inputValue?: string;\n  onChange?: (o: Option[]) => void;\n  onInputChange?: (e?: React.ChangeEvent<HTMLInputElement>) => void;\n  getOptionValue?: (o?: Option) => ChipValue;\n  getOptionLabel?: (o?: Option) => string;\n  getNewOptionData?: (v?: ChipValue, l?: string) => Option;\n  renderChip?: (props?: RenderChip<Option>) => React.ReactNode;\n  inputAriaLabel?: string;\n  /**\n   * Добавляет значение в список на событие `onBlur`\n   */\n  addOnBlur?: boolean;\n}\n\nexport const chipsInputDefaultProps: ChipsInputBaseProps<any> = {\n  onChange: noop,\n  onInputChange: noop,\n  onKeyDown: noop,\n  onBlur: noop,\n  onFocus: noop,\n  value: [],\n  inputValue: '',\n  inputAriaLabel: 'Введите ваше значение...',\n  getOptionValue: (option) => option.value,\n  getOptionLabel: (option) => option.label,\n  getNewOptionData: (_, label) => ({\n    value: label,\n    label,\n  }),\n  renderChip(props) {\n    if (!props) {\n      return null;\n    }\n\n    const { disabled, value, label, ...rest } = props;\n    return (\n      <Chip value={value} removable={!disabled} {...rest}>\n        {label}\n      </Chip>\n    );\n  },\n  addOnBlur: false,\n};\n\nexport const ChipsInputBase = <Option extends ChipOption>(props: ChipsInputBaseProps<Option>) => {\n  const propsWithDefault = { ...chipsInputDefaultProps, ...props };\n  const {\n    style,\n    className,\n    getRootRef,\n    value,\n    onChange,\n    onInputChange,\n    onKeyDown,\n    onBlur,\n    onFocus,\n    children,\n    inputValue,\n    getRef,\n    placeholder,\n    getOptionValue,\n    getOptionLabel,\n    getNewOptionData,\n    renderChip,\n    inputAriaLabel,\n    addOnBlur,\n    ...restProps\n  } = propsWithDefault;\n  const { sizeY } = useAdaptivity();\n\n  const [focused, setFocused] = React.useState(false);\n  const { fieldValue, addOptionFromInput, removeOption, selectedOptions, handleInputChange } =\n    useChipsInput(propsWithDefault);\n  const inputRef = useExternRef(getRef);\n\n  const isDisabled = restProps.disabled || restProps.readOnly;\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (isDisabled) {\n      e.preventDefault();\n      return;\n    }\n\n    onKeyDown!(e);\n\n    if (e.key === 'Backspace' && !e.defaultPrevented && !fieldValue && selectedOptions.length) {\n      removeOption(getOptionValue!(selectedOptions[selectedOptions.length - 1]));\n      e.preventDefault();\n    }\n\n    if (e.key === 'Enter' && !e.defaultPrevented && fieldValue) {\n      addOptionFromInput();\n      e.preventDefault();\n    }\n  };\n\n  const handleBlur = (e: React.FocusEvent<HTMLInputElement>) => {\n    if (focused) {\n      setFocused(false);\n    }\n    onBlur!(e);\n\n    if (addOnBlur && !e.defaultPrevented) {\n      addOptionFromInput();\n    }\n  };\n\n  const handleFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n    if (!focused) {\n      setFocused(true);\n    }\n    onFocus!(e);\n  };\n\n  const handleChipRemove = (_: React.MouseEvent | undefined, value: ChipValue | undefined) => {\n    if (value !== undefined) {\n      removeOption(value);\n    }\n  };\n\n  const handleClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (isDisabled) {\n      e.preventDefault();\n      return;\n    }\n\n    if (inputRef?.current !== null && !focused) {\n      inputRef.current.focus();\n    }\n  };\n\n  return (\n    <div\n      onClick={handleClick}\n      role=\"presentation\"\n      style={style}\n      className={classNames(\n        styles['ChipsInputBase'],\n        sizeY === SizeType.COMPACT && styles['ChipsInputBase--sizeY-compact'],\n        !selectedOptions.length && styles['ChipsInputBase--hasPlaceholder'],\n        className,\n      )}\n      ref={getRootRef}\n    >\n      {selectedOptions.map((option: Option) => {\n        const value = getOptionValue!(option);\n        const label = getOptionLabel!(option);\n\n        return (\n          <React.Fragment key={`${typeof value}-${value}`}>\n            {renderChip!({\n              option,\n              value,\n              label,\n              onRemove: handleChipRemove,\n              disabled: Boolean(restProps.disabled),\n              className: styles['ChipsInputBase__chip'],\n            })}\n          </React.Fragment>\n        );\n      })}\n      <label className={styles['ChipsInputBase__label']} aria-label={inputAriaLabel}>\n        <input\n          type=\"text\"\n          autoCapitalize=\"none\"\n          autoComplete=\"off\"\n          autoCorrect=\"off\"\n          spellCheck={false}\n          aria-autocomplete=\"list\"\n          className={styles['ChipsInputBase__el']}\n          {...restProps}\n          ref={inputRef}\n          value={fieldValue}\n          onChange={handleInputChange}\n          onKeyDown={handleKeyDown}\n          onFocus={handleFocus}\n          onBlur={handleBlur}\n          placeholder={selectedOptions.length ? undefined : placeholder}\n        />\n      </label>\n    </div>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}