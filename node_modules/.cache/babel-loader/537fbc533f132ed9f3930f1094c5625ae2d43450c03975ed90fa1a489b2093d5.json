{"ast":null,"code":"import * as React from \"react\";\nimport vkBridge from \"@vkontakte/vk-bridge\";\nimport { platform } from \"../../lib/platform\";\nexport var WebviewType;\n(function (WebviewType) {\n  WebviewType[\"VKAPPS\"] = \"vkapps\";\n  WebviewType[\"INTERNAL\"] = \"internal\";\n})(WebviewType || (WebviewType = {}));\nexport var ConfigProviderContext = /*#__PURE__*/React.createContext({\n  webviewType: WebviewType.VKAPPS,\n  isWebView: vkBridge.isWebView(),\n  transitionMotionEnabled: true,\n  platform: platform(),\n  appearance: undefined,\n  locale: \"ru\"\n});\nexport var useConfigProvider = function () {\n  return React.useContext(ConfigProviderContext);\n};","map":{"version":3,"names":["React","vkBridge","platform","WebviewType","ConfigProviderContext","createContext","webviewType","VKAPPS","isWebView","transitionMotionEnabled","appearance","undefined","locale","useConfigProvider","useContext"],"sources":["/Users/evgeny/Desktop/VsCodeProjects/vk-client/vk-client/node_modules/@vkontakte/vkui/src/components/ConfigProvider/ConfigProviderContext.tsx"],"sourcesContent":["import * as React from 'react';\nimport vkBridge, { AppearanceType } from '@vkontakte/vk-bridge';\nimport { platform, PlatformType } from '../../lib/platform';\n\nexport enum WebviewType {\n  VKAPPS = 'vkapps',\n  INTERNAL = 'internal',\n}\n\nexport interface ConfigProviderContextInterface {\n  /**\n   * Подсказывает приложению, обёрнутому в `ConfigProvider`, где открыто приложение: внутри webview или в мобильном браузере\n   */\n  isWebView: boolean;\n  /**\n   * Тип вебвью.<br>\n   * В случае `WebviewType.VKAPPS` интерфейс будет адаптирован для отображения в вебвью Mini Apps (системные контролы в правой части шапки)\n   */\n  webviewType: WebviewType.INTERNAL | WebviewType.VKAPPS;\n  /**\n   * Тип цветовой схемы – `light` или `dark`\n   */\n  appearance: AppearanceType | undefined;\n  /**\n   * Включена ли анимация переходов между экранами в `Root` и `View`\n   */\n  transitionMotionEnabled: boolean;\n  /**\n   * Платформа\n   */\n  platform: PlatformType;\n  /**\n   * Строка с языковой меткой BCP 47\n   */\n  locale: string;\n}\n\nexport const ConfigProviderContext = React.createContext<ConfigProviderContextInterface>({\n  webviewType: WebviewType.VKAPPS,\n  isWebView: vkBridge.isWebView(),\n  transitionMotionEnabled: true,\n  platform: platform(),\n  appearance: undefined, // undefined обозначает что тема должна определиться автоматически\n  locale: 'ru',\n});\n\nexport const useConfigProvider = () => React.useContext(ConfigProviderContext);\n"],"mappings":"AAAA,YAAYA,KAAA,MAAW;AACvB,OAAOC,QAAA,MAAkC;AACzC,SAASC,QAAQ,QAAsB;WAEhCC,WAAA;WAAKA,WAAW;EAAXA,WAAA,CACV,YAAS;EADCA,WAAA,CAEV,cAAW;GAFDA,WAAA,KAAAA,WAAA;AAiCZ,OAAO,IAAMC,qBAAA,gBAAwBJ,KAAA,CAAMK,aAAa,CAAiC;EACvFC,WAAA,EAAaH,WAAA,CAAYI,MAAM;EAC/BC,SAAA,EAAWP,QAAA,CAASO,SAAS;EAC7BC,uBAAA,EAAyB;EACzBP,QAAA,EAAUA,QAAA;EACVQ,UAAA,EAAYC,SAAA;EACZC,MAAA,EAAQ;AACV;AAEA,OAAO,IAAMC,iBAAA,GAAoB,SAAAA,CAAA;SAAMb,KAAA,CAAMc,UAAU,CAACV,qBAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}