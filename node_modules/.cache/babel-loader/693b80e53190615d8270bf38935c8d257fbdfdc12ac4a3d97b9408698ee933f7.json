{"ast":null,"code":"import { _ as _sliced_to_array } from \"@swc/helpers/_/_sliced_to_array\";\nimport * as React from \"react\";\nimport { useDOM } from \"../lib/dom\";\nimport { useGlobalEventListener } from \"./useGlobalEventListener\";\n/**\n Проверяет, закрыла ли клавиатура часть экрана, 24% подошло к большинству устройств\n Работает на iOS и Android, где софт-клавиатура ресайзит viewport в браузерах\n */\nexport function getPreciseKeyboardState(window) {\n  var innerHeight = window.innerHeight,\n    availHeight = window.screen.availHeight;\n  var coveredViewportPercentage = Math.round((1 - innerHeight / availHeight) * 100);\n  return coveredViewportPercentage > 24;\n}\nvar eventOptions = {\n  passive: true,\n  capture: false\n};\nexport function useKeyboard() {\n  var _document_activeElement, _document;\n  var document = useDOM().document;\n  var _React_useState = _sliced_to_array(React.useState(false), 2),\n    isOpened = _React_useState[0],\n    setIsOpened = _React_useState[1];\n  var onFocus = React.useCallback(function (event) {\n    var _document_activeElement, _document, _document_activeElement1, _document1;\n    var isOpened = (event === true || event.type === \"focusin\") && (((_document = document) === null || _document === void 0 ? void 0 : (_document_activeElement = _document.activeElement) === null || _document_activeElement === void 0 ? void 0 : _document_activeElement.tagName) === \"INPUT\" || ((_document1 = document) === null || _document1 === void 0 ? void 0 : (_document_activeElement1 = _document1.activeElement) === null || _document_activeElement1 === void 0 ? void 0 : _document_activeElement1.tagName) === \"TEXTAREA\");\n    setIsOpened(isOpened);\n  }, [(_document = document) === null || _document === void 0 ? void 0 : (_document_activeElement = _document.activeElement) === null || _document_activeElement === void 0 ? void 0 : _document_activeElement.tagName]);\n  /**\n  У полей с autoFocus не отлавливаются события focus, для этого вызываем вручную,\n  чтобы иметь хоть какое-то понимание происходящего.\n  */\n  React.useEffect(function () {\n    onFocus(true);\n  }, [onFocus]);\n  useGlobalEventListener(document, \"focusout\", onFocus, eventOptions);\n  useGlobalEventListener(document, \"focusin\", onFocus, eventOptions);\n  return {\n    isOpened: isOpened\n  };\n}","map":{"version":3,"names":["React","useDOM","useGlobalEventListener","getPreciseKeyboardState","window","innerHeight","availHeight","screen","coveredViewportPercentage","Math","round","eventOptions","passive","capture","useKeyboard","_document_activeElement","_document","document","_React_useState","_sliced_to_array","useState","isOpened","setIsOpened","onFocus","useCallback","event","_document_activeElement1","_document1","type","activeElement","tagName","useEffect"],"sources":["/Users/evgeny/Desktop/VsCodeProjects/vk-client/vk-client/node_modules/@vkontakte/vkui/src/hooks/useKeyboard.ts"],"sourcesContent":["import * as React from 'react';\nimport { useDOM } from '../lib/dom';\nimport { useGlobalEventListener } from './useGlobalEventListener';\n\ninterface SoftwareKeyboardState {\n  isOpened: boolean;\n}\n\n/**\n Проверяет, закрыла ли клавиатура часть экрана, 24% подошло к большинству устройств\n Работает на iOS и Android, где софт-клавиатура ресайзит viewport в браузерах\n */\nexport function getPreciseKeyboardState(window: any): boolean {\n  const {\n    innerHeight,\n    screen: { availHeight },\n  } = window;\n\n  const coveredViewportPercentage = Math.round((1 - innerHeight / availHeight) * 100);\n  return coveredViewportPercentage > 24;\n}\n\nconst eventOptions = {\n  passive: true,\n  capture: false,\n};\n\nexport function useKeyboard(): SoftwareKeyboardState {\n  const { document } = useDOM();\n\n  const [isOpened, setIsOpened] = React.useState(false);\n\n  const onFocus = React.useCallback(\n    (event: FocusEvent | true) => {\n      const isOpened =\n        (event === true || event.type === 'focusin') &&\n        (document?.activeElement?.tagName === 'INPUT' ||\n          document?.activeElement?.tagName === 'TEXTAREA');\n      setIsOpened(isOpened);\n    },\n    [document?.activeElement?.tagName],\n  );\n\n  /**\n   У полей с autoFocus не отлавливаются события focus, для этого вызываем вручную,\n   чтобы иметь хоть какое-то понимание происходящего.\n   */\n  React.useEffect(() => {\n    onFocus(true);\n  }, [onFocus]);\n\n  useGlobalEventListener(document, 'focusout', onFocus, eventOptions);\n  useGlobalEventListener(document, 'focusin', onFocus, eventOptions);\n\n  return { isOpened };\n}\n"],"mappings":";AAAA,YAAYA,KAAA,MAAW;AACvB,SAASC,MAAM,QAAQ;AACvB,SAASC,sBAAsB,QAAQ;AAMvC;;;;AAIA,OAAO,SAASC,wBAAwBC,MAAW;EACjD,IACEC,WAAA,GAEED,MAAA,CAFFC,WAAA;IACAC,WAAU,GACRF,MAAA,CADFG,MAAA,CAAUD,WAAA;EAGZ,IAAME,yBAAA,GAA4BC,IAAA,CAAKC,KAAK,CAAC,CAAC,IAAIL,WAAA,GAAcC,WAAU,IAAK;EAC/E,OAAOE,yBAAA,GAA4B;AACrC;AAEA,IAAMG,YAAA,GAAe;EACnBC,OAAA,EAAS;EACTC,OAAA,EAAS;AACX;AAEA,OAAO,SAASC,YAAA;MAaXC,uBAAA,EAAAC,SAAA;EAZH,IAAMC,QAAE,GAAahB,MAAA,GAAbgB,QAAA;EAER,IAAgCC,eAAA,GAAAC,gBAAA,CAAAnB,KAAA,CAAMoB,QAAQ,CAAC;IAAxCC,QAAA,GAAyBH,eAAA;IAAfI,WAAA,GAAeJ,eAAA;EAEhC,IAAMK,OAAA,GAAUvB,KAAA,CAAMwB,WAAW,CAC/B,UAACC,KAAA;QAGIV,uBAAA,EAAAC,SAAA,EACCU,wBAAA,EAAAC,UAAA;IAHJ,IAAMN,QAAA,GACJ,CAACI,KAAA,KAAU,QAAQA,KAAA,CAAMG,IAAI,KAAK,SAAQ,MACzC,EAAAZ,SAAA,GAAAC,QAAA,cAAAD,SAAA,wBAAAD,uBAAA,GAAAC,SAAA,CAAUa,aAAa,cAAvBd,uBAAA,uBAAAA,uBAAA,CAAyBe,OAAO,MAAK,WACpC,EAAAH,UAAA,GAAAV,QAAA,cAAAU,UAAA,wBAAAD,wBAAA,GAAAC,UAAA,CAAUE,aAAa,cAAvBH,wBAAA,uBAAAA,wBAAA,CAAyBI,OAAO,MAAK,UAAS;IAClDR,WAAA,CAAYD,QAAA;EACd,GACA,C,CAACL,SAAA,GAAAC,QAAA,cAAAD,SAAA,wBAAAD,uBAAA,GAAAC,SAAA,CAAUa,aAAa,cAAvBd,uBAAA,uBAAAA,uBAAA,CAAyBe,OAAO,CAAC;EAGpC;;;;EAIA9B,KAAA,CAAM+B,SAAS,CAAC;IACdR,OAAA,CAAQ;EACV,GAAG,CAACA,OAAA,CAAQ;EAEZrB,sBAAA,CAAuBe,QAAA,EAAU,YAAYM,OAAA,EAASZ,YAAA;EACtDT,sBAAA,CAAuBe,QAAA,EAAU,WAAWM,OAAA,EAASZ,YAAA;EAErD,OAAO;IAAEU,QAAA,EAAAA;EAAS;AACpB"},"metadata":{},"sourceType":"module","externalDependencies":[]}