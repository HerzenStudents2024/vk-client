{"version":3,"sources":["../../src/hooks/useChipsSelect.ts"],"sourcesContent":["import * as React from 'react';\nimport { ChipOption } from '../components/Chip/Chip';\nimport { ChipsSelectProps } from '../components/ChipsSelect/ChipsSelect';\nimport { useChipsInput } from './useChipsInput';\n\nexport const useChipsSelect = <Option extends ChipOption>(\n  props: Partial<ChipsSelectProps<Option>>,\n) => {\n  const { options, filterFn, getOptionLabel, getOptionValue } = props;\n\n  const [opened, setOpened] = React.useState(false);\n  const [focusedOptionIndex, setFocusedOptionIndex] = React.useState<number | null>(0);\n  const [focusedOption, setFocusedOption] = React.useState<Option | null>(null);\n\n  const { fieldValue, selectedOptions, ...chipsInputState } = useChipsInput(props);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement> | undefined) => {\n    if (!e) {\n      return;\n    }\n    chipsInputState.handleInputChange(e);\n\n    if (!opened) {\n      setOpened(true);\n      setFocusedOptionIndex(0);\n    }\n  };\n\n  let filteredOptions = React.useMemo(() => {\n    return filterFn\n      ? options!.filter((option) => filterFn(fieldValue, option, getOptionLabel))\n      : (options as Option[]);\n  }, [options, filterFn, fieldValue, getOptionLabel]);\n\n  filteredOptions = React.useMemo(() => {\n    if (!filteredOptions.length) {\n      return filteredOptions;\n    }\n\n    const filteredSet = new Set(filteredOptions);\n    const selected = selectedOptions.map((item) => getOptionValue!(item));\n\n    for (const item of filteredSet) {\n      if (selected.includes(getOptionValue!(item))) {\n        filteredSet.delete(item);\n      }\n    }\n\n    return [...filteredSet];\n  }, [filteredOptions, selectedOptions, getOptionValue]);\n\n  return {\n    ...chipsInputState,\n    fieldValue,\n    handleInputChange,\n    opened,\n    setOpened,\n    filteredOptions,\n    focusedOptionIndex,\n    setFocusedOptionIndex,\n    focusedOption,\n    setFocusedOption,\n    selectedOptions,\n  };\n};\n"],"names":["React","useChipsInput","useChipsSelect","props","options","filterFn","getOptionLabel","getOptionValue","useState","opened","setOpened","focusedOptionIndex","setFocusedOptionIndex","focusedOption","setFocusedOption","fieldValue","selectedOptions","chipsInputState","handleInputChange","e","filteredOptions","useMemo","filter","option","length","filteredSet","Set","selected","map","item","includes","delete"],"mappings":";;;;;AAAA,YAAYA,WAAW,QAAQ;AAG/B,SAASC,aAAa,QAAQ,kBAAkB;AAEhD,OAAO,IAAMC,iBAAiB,SAC5BC;IAEA,IAAQC,UAAsDD,MAAtDC,SAASC,WAA6CF,MAA7CE,UAAUC,iBAAmCH,MAAnCG,gBAAgBC,iBAAmBJ,MAAnBI;IAE3C,IAA4BP,mCAAAA,MAAMQ,QAAQ,CAAC,YAApCC,SAAqBT,oBAAbU,YAAaV;IAC5B,IAAoDA,oCAAAA,MAAMQ,QAAQ,CAAgB,QAA3EG,qBAA6CX,qBAAzBY,wBAAyBZ;IACpD,IAA0CA,oCAAAA,MAAMQ,QAAQ,CAAgB,WAAjEK,gBAAmCb,qBAApBc,mBAAoBd;IAE1C,IAA4DC,iBAAAA,cAAcE,QAAlEY,aAAoDd,eAApDc,YAAYC,kBAAwCf,eAAxCe,iBAAoBC,6CAAoBhB;QAApDc;QAAYC;;IAEpB,IAAME,oBAAoB,SAACC;QACzB,IAAI,CAACA,GAAG;YACN;QACF;QACAF,gBAAgBC,iBAAiB,CAACC;QAElC,IAAI,CAACV,QAAQ;YACXC,UAAU;YACVE,sBAAsB;QACxB;IACF;IAEA,IAAIQ,kBAAkBpB,MAAMqB,OAAO,CAAC;QAClC,OAAOhB,WACHD,QAASkB,MAAM,CAAC,SAACC;mBAAWlB,SAASU,YAAYQ,QAAQjB;aACxDF;IACP,GAAG;QAACA;QAASC;QAAUU;QAAYT;KAAe;IAElDc,kBAAkBpB,MAAMqB,OAAO,CAAC;QAC9B,IAAI,CAACD,gBAAgBI,MAAM,EAAE;YAC3B,OAAOJ;QACT;QAEA,IAAMK,cAAc,IAAIC,IAAIN;QAC5B,IAAMO,WAAWX,gBAAgBY,GAAG,CAAC,SAACC;mBAAStB,eAAgBsB;;YAE1D,kCAAA,2BAAA;;YAAL,QAAK,YAAcJ,gCAAd,SAAA,6BAAA,QAAA,yBAAA,iCAA2B;gBAA3B,IAAMI,OAAN;gBACH,IAAIF,SAASG,QAAQ,CAACvB,eAAgBsB,QAAQ;oBAC5CJ,YAAYM,MAAM,CAACF;gBACrB;YACF;;YAJK;YAAA;;;qBAAA,6BAAA;oBAAA;;;oBAAA;0BAAA;;;;QAML,OAAQ,qBAAGJ;IACb,GAAG;QAACL;QAAiBJ;QAAiBT;KAAe;IAErD,OAAO,wCACFU;QACHF,YAAAA;QACAG,mBAAAA;QACAT,QAAAA;QACAC,WAAAA;QACAU,iBAAAA;QACAT,oBAAAA;QACAC,uBAAAA;QACAC,eAAAA;QACAC,kBAAAA;QACAE,iBAAAA;;AAEJ,EAAE"}