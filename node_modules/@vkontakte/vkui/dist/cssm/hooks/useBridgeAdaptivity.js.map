{"version":3,"sources":["../../../src/hooks/useBridgeAdaptivity.ts"],"sourcesContent":["import * as React from 'react';\nimport vkBridge from '@vkontakte/vk-bridge';\nimport { useIsomorphicLayoutEffect } from '../lib/useIsomorphicLayoutEffect';\n\nexport interface BridgeAdaptivity {\n  type: '' | 'force_mobile' | 'force_mobile_compact' | 'adaptive';\n  viewportWidth: number;\n  viewportHeight: number;\n}\n\ninterface BridgeEvent {\n  detail: {\n    type: string;\n    data: {\n      [index: string]: any;\n    };\n  };\n}\n\nlet initialState: BridgeAdaptivity = {\n  type: '',\n  viewportWidth: 0,\n  viewportHeight: 0,\n};\n\nfunction resolveAdaptivity(e: BridgeEvent): BridgeAdaptivity | null {\n  const { type, data } = e.detail;\n\n  if (type !== 'VKWebAppUpdateConfig' || !data) {\n    return null;\n  }\n\n  const { adaptivity, viewport_width: viewportWidth, viewport_height: viewportHeight } = data;\n\n  const bridgeAdaptivity: BridgeAdaptivity = {\n    type: '',\n    viewportWidth: isFinite(viewportWidth) ? +viewportWidth : 0,\n    viewportHeight: isFinite(viewportHeight) ? +viewportHeight : 0,\n  };\n\n  switch (adaptivity) {\n    case 'force_mobile':\n    case 'force_mobile_compact':\n    case 'adaptive':\n      bridgeAdaptivity.type = adaptivity;\n  }\n\n  return bridgeAdaptivity;\n}\n\nvkBridge.subscribe((e: BridgeEvent) => {\n  const bridgeAdaptivity = resolveAdaptivity(e);\n\n  if (bridgeAdaptivity) {\n    initialState = bridgeAdaptivity;\n  }\n});\n\nexport function useBridgeAdaptivity(): BridgeAdaptivity {\n  const [bridgeAdaptivity, setBridgeAdaptivity] = React.useState<BridgeAdaptivity>(initialState);\n\n  useIsomorphicLayoutEffect(() => {\n    function bridgeListener(e: BridgeEvent) {\n      const newBridgeAdaptivity = resolveAdaptivity(e);\n\n      if (newBridgeAdaptivity) {\n        setBridgeAdaptivity(newBridgeAdaptivity);\n      }\n    }\n\n    vkBridge.subscribe(bridgeListener);\n    return () => {\n      vkBridge.unsubscribe(bridgeListener);\n    };\n  }, []);\n\n  return bridgeAdaptivity;\n}\n"],"names":["React","vkBridge","useIsomorphicLayoutEffect","initialState","type","viewportWidth","viewportHeight","resolveAdaptivity","e","data","detail","adaptivity","viewport_width","viewport_height","bridgeAdaptivity","isFinite","subscribe","useBridgeAdaptivity","setBridgeAdaptivity","useState","bridgeListener","newBridgeAdaptivity","unsubscribe"],"mappings":"AAAA,YAAYA,WAAW,QAAQ;AAC/B,OAAOC,cAAc,uBAAuB;AAC5C,SAASC,yBAAyB,QAAQ,mCAAmC;AAiB7E,IAAIC,eAAiC;IACnCC,MAAM;IACNC,eAAe;IACfC,gBAAgB;AAClB;AAEA,SAASC,kBAAkBC,CAAc;IACvC,MAAM,EAAEJ,IAAI,EAAEK,IAAI,EAAE,GAAGD,EAAEE,MAAM;IAE/B,IAAIN,SAAS,0BAA0B,CAACK,MAAM;QAC5C,OAAO;IACT;IAEA,MAAM,EAAEE,UAAU,EAAEC,gBAAgBP,aAAa,EAAEQ,iBAAiBP,cAAc,EAAE,GAAGG;IAEvF,MAAMK,mBAAqC;QACzCV,MAAM;QACNC,eAAeU,SAASV,iBAAiB,CAACA,gBAAgB;QAC1DC,gBAAgBS,SAAST,kBAAkB,CAACA,iBAAiB;IAC/D;IAEA,OAAQK;QACN,KAAK;QACL,KAAK;QACL,KAAK;YACHG,iBAAiBV,IAAI,GAAGO;IAC5B;IAEA,OAAOG;AACT;AAEAb,SAASe,SAAS,CAAC,CAACR;IAClB,MAAMM,mBAAmBP,kBAAkBC;IAE3C,IAAIM,kBAAkB;QACpBX,eAAeW;IACjB;AACF;AAEA,OAAO,SAASG;IACd,MAAM,CAACH,kBAAkBI,oBAAoB,GAAGlB,MAAMmB,QAAQ,CAAmBhB;IAEjFD,0BAA0B;QACxB,SAASkB,eAAeZ,CAAc;YACpC,MAAMa,sBAAsBd,kBAAkBC;YAE9C,IAAIa,qBAAqB;gBACvBH,oBAAoBG;YACtB;QACF;QAEApB,SAASe,SAAS,CAACI;QACnB,OAAO;YACLnB,SAASqB,WAAW,CAACF;QACvB;IACF,GAAG,EAAE;IAEL,OAAON;AACT"}