{"version":3,"file":"useResolvedPath.js","sourceRoot":"","sources":["../../src/hooks/useResolvedPath.ts"],"names":[],"mappings":"AAAA,OAAO,EAGL,SAAS,EAGV,MAAM,mBAAmB,CAAC;AAC3B,OAAO,EAAE,aAAa,EAAE,MAAM,aAAa,CAAC;AAC5C,OAAO,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,OAAO,CAAC;AAC5C,OAAO,EAAE,WAAW,EAAE,MAAM,SAAS,CAAC;AAEtC;;;;;;;;;;;;;;;;;;;;;;GAsBG;AACH,SAAS,0BAA0B,CAE/B,OAAY;IACd,OAAO,OAAO,CAAC,MAAM,CACnB,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,CACf,KAAK,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CACnE,CAAC;AACJ,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,eAAe,CAC7B,EAAM,EACN,EAAE,QAAQ,KAAyC,EAAE;IAErD,MAAM,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE,GAAG,UAAU,CAAC,aAAa,CAAC,CAAC;IACrE,MAAM,EAAE,QAAQ,EAAE,gBAAgB,EAAE,GAAG,WAAW,EAAE,CAAC;IAErD,MAAM,kBAAkB,GAAG,IAAI,CAAC,SAAS,CACvC,0BAA0B,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,YAAY,CAAC,CACvE,CAAC;IAEF,OAAO,OAAO,CACZ,GAAG,EAAE,CACH,SAAS,CACP,EAAE,EACF,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,EAC9B,gBAAgB,EAChB,QAAQ,KAAK,MAAM,CACpB,EACH,CAAC,EAAE,EAAE,kBAAkB,EAAE,gBAAgB,EAAE,QAAQ,CAAC,CACrD,CAAC;AACJ,CAAC","sourcesContent":["import {\n  Path,\n  RelativeRoutingType,\n  resolveTo,\n  To,\n  AgnosticRouteMatch\n} from '@remix-run/router';\nimport { RouterContext } from '../contexts';\nimport { useContext, useMemo } from 'react';\nimport { useLocation } from './hooks';\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nfunction getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n  >(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/hooks/use-resolved-path\n */\nexport function useResolvedPath(\n  to: To,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): Path {\n  const { router: { state: { matches } } } = useContext(RouterContext);\n  const { pathname: locationPathname } = useLocation();\n\n  const routePathnamesJson = JSON.stringify(\n    getPathContributingMatches(matches).map((match) => match.pathnameBase)\n  );\n\n  return useMemo(\n    () =>\n      resolveTo(\n        to,\n        JSON.parse(routePathnamesJson),\n        locationPathname,\n        relative === 'path'\n      ),\n    [to, routePathnamesJson, locationPathname, relative]\n  );\n}\n"]}